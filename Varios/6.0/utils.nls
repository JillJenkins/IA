; Filtra la lista l1 segun el predicado aplicado a l2 (l1 y l2 deben tener la misma longitud).
; Si un elemento de l2 verifica el predicado, entonces se devuelve el elemento correspondiente
; de l1

; filtra [1 2 3 4 5] [x -> x = 1] [0 1 1 0 1] ==> [2 3 5]

to-report filtra [l1 pred l2]
  let zip (map [[x y] -> (list x y)] l1 l2)
  report map [x -> first x] (filter [x -> (run-result pred (last x))] zip)
end

; Funciones de conjuntos

to-report set:add [x s]
  report ifelse-value member? x s [s] [lput x s]
end

to-report set:remove [x s]
  report ifelse-value member? x s [remove x s] [s]
end

to-report set:union [s1 s2]
  report reduce [[x y] -> (set:add y x) ] (fput s1 s2)
end

to-report set:intersection [s1 s2]
  report filter [x -> member? x s1] s2
end

to-report set:subset? [s1 s2]
  report reduce and map [x -> member? x s2] s1
end

to-report set:equal? [s1 s2]
  report (set:subset? s1 s2) and (set:subset? s2 s1)
end

to-report set:list-to-set [s1]
  report remove-duplicates s1
end

to-report set:dif [s1 s2]
  report filter [ x ->  not member? x s2 ] s1
end

to-report set:sym-dif [s1 s2]
  report set:union (set:dif s1 s2) (set:dif s2 s1)
end

to-report set:member? [x s]
  report member? x s 
end

to-report set:is-set? [s]
  report s = (set:list-to-set s)
end

to-report set:size [s]
  report length s 
end

to set:test
 let s1 [1 2 3 4 5]
 let s2 [4 3 5 6 7 8]
 let l1 [1 2 3 4 5 4 3 2 1]
 show set:list-to-set l1
 show set:union s1 s2
 show set:intersection s1 s2
 show set:subset? [5 3] s1
 show set:subset? s1 s2
 show set:equal? s1 s2
 show set:equal? [1 2] [2 1]
 show set:dif s1 s2
 show set:dif s2 s1
 show set:sym-dif s1 s2
 show set:member? 1 s1
 show set:member? 1 s2
 show set:is-set? l1
 show set:is-set? s1
 show set:size s1
end