;; A Dataframe Library
;; 
;; Something like:
;│ Outlook  │ Temp │ Humidity │ Windy │ PlayGolf │ 
;├──────────┼──────┼──────────┼───────┼──────────┤
;├──────────┼──────┼──────────┼───────┼──────────┤
;│ Rainy    │ Hot  │ High     │ false │ false    │ 
;├──────────┼──────┼──────────┼───────┼──────────┤
;│ Rainy    │ Hot  │ High     │ true  │ false    │ 
;├──────────┼──────┼──────────┼───────┼──────────┤
;│ Overcast │ Hot  │ High     │ false │ true     │ 
;├──────────┼──────┼──────────┼───────┼──────────┤
;│ Sunny    │ Mild │ High     │ false │ true     │ 
;├──────────┼──────┼──────────┼───────┼──────────┤
;│ Sunny    │ Cool │ Normal   │ false │ true     │ 
;└──────────┴──────┴──────────┴───────┴──────────┘
;
; It has a header row, with attributes names 
; and columns with values for the different 
; attributes.


; Reports the column of an attribute (with head)
to-report DF:column [at df]
  let ats first df
  let p position at ats
  report map [ x -> item p x ] df
end

; Reports the dataframe filtering one attribute with one value
to-report DF:filtra [df atr val]
  let atrs first df
  let p position atr atrs
  let df2 (fput (first df) filter [ x -> (item p x) = val ] (bf df))
  report df2
end

; Shows dataframe in Command Center
to DF:show [df]
  let m 1 + max map [ x -> max map [ y -> length (word y) ] x ] df
  output-print "Dataframe:"
  repeat 1 + (m + 1) * length (first df) [output-type "-"]
  output-print ""
  foreach df
  [ x ->
    output-type "|"
    foreach x
    [ y ->
      output-type y
      repeat (m - length (word y)) [output-type " "]
      output-type "|"
    ]
    output-print ""
    repeat 1 + (m + 1) * length (first df) [output-type "-"]
    output-print ""
  ]
end

; Prints Dataframe in Output
to-report DF:output [df]
  let s "Dataframe:\n"
  let atrs first df
  let long map [ x -> 1 + max map [ y -> length (word y) ] (DF:column x df) ] atrs
  set s (word s "\n")
  ;; Lineas
  let lin "├"
  foreach long
  [ x ->
    repeat (1 + x) [set lin (word lin "─")]
    set lin (word lin "┼")
  ]
  set lin (word (bl lin) "┤\n")
  ;; Cabecera
  set s (word s "│ ")
  (foreach (first df) long
    [ [x y] ->
      set s (word s  x )
      repeat (y - length (word x)) [set s (word s " ")]
      set s (word s "│ ")
    ])
  set s (word s "\n" lin)
  ; Cuerpo
  foreach bf df
  [ x ->
    set s (word s lin)
    set s (word s "│ ")
    (foreach x long
    [ [y z] ->
      set s (word s  y )
      repeat (z - length (word y)) [set s (word s " ")]
      set s (word s "│ ")
    ])
    set s (word s "\n")
    ;set s (word s lin)
  ]
  ;; Linea final
  let lin2 "└"
  foreach long
  [ x ->
    repeat (1 + x) [set lin2 (word lin2 "─")]
    set lin2 (word lin2 "┴")
  ]
  set lin2 (word (bl lin2) "┘\n")
  set s (word s lin2)
  ; Devolución
  report s
end

; Load a CSV file into a DF
to-report DF:load
  let f user-file
  ifelse is-string? f
  [
    report csv:from-file f
  ]
  [report false]
end
